@startuml
participant SPA
participant "MPT API" as API
participant "UserController" as Ctrl
participant "UserService" as Srv
participant "UserRepo" as Repo
participant "UserMapper" as Map
participant "TaskRepo" as tr
participant "TaskMapper" as tm
participant "MGI API" as API2


activate SPA
SPA -> API: GET(/api/users/allInfo)
activate API

API -> API: auth middleware
API -> Ctrl: GetUserAllInfo()
activate Ctrl

Ctrl -> Ctrl: permissions middleware
Ctrl -> Srv: GetUserAllInfo()
activate Srv

Srv -> Repo: GetByIdAsync(id)



Srv -> Map: toDTO(user)
activate Map
Map --> Srv: userDto
deactivate Map

Srv -> tr: tasks = GetAllFilteredAsync(null, id, null)
activate tr
deactivate tr

loop for each task
    alt SurveillanceTask

        Srv -> API2: GET(/api/floor/:id)
        activate API2
        API2 --> Srv: floor info
        deactivate API2

        Srv -> tm: toDTO(task, floor)
        activate tm
        tm -> Srv: TaskDto
        deactivate tm

    else PickupDeliveryTask
        Srv -> tm: toDTO(task)
        activate tm
        tm -> Srv: TaskDto
        deactivate tm

    end
    Srv -> Srv: tasksDto.Add(TaskDto)

end

Srv -> Map: ToUserWithTasks(userDto, tasksDto)

Srv --> Ctrl: userwithtasks
deactivate Srv

Ctrl --> API: status copde 200
deactivate Ctrl

API --> SPA: success
deactivate API

SPA -> SPA: download de dados num ficheiro .json





@enduml